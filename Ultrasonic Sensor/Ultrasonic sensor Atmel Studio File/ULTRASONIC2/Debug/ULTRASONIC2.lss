
ULTRASONIC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800132  00800132  00000798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001077  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e4  00000000  00000000  000018db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c8  00000000  00000000  000022bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00002888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fa  00000000  00000000  00002e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a2 33       	cpi	r26, 0x32	; 50
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	a2 e3       	ldi	r26, 0x32	; 50
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a8 33       	cpi	r26, 0x38	; 56
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  c2:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <HCSR04Init>:

void HCSR04Init()
{
	
	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<US_TRIG_POS);
  ca:	84 b3       	in	r24, 0x14	; 20
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	84 bb       	out	0x14, r24	; 20
  d0:	08 95       	ret

000000d2 <HCSR04Trigger>:

void HCSR04Trigger()
{   // this function will generate ultrasonic sound wave for 15 microseconds
	//Send a 10uS pulse on trigger line
	
	US_PORT|=(1<<US_TRIG_POS);	//high
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <HCSR04Trigger+0x8>
	
	_delay_us(15);				//wait 15uS
	
	US_PORT&=~(1<<US_TRIG_POS);	//low
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	08 95       	ret

000000e6 <GetPulseWidth>:
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	dc 01       	movw	r26, r24
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <GetPulseWidth+0x12>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
  ee:	99 99       	sbic	0x13, 1	; 19
  f0:	0a c0       	rjmp	.+20     	; 0x106 <GetPulseWidth+0x20>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	a1 1d       	adc	r26, r1
  f6:	b1 1d       	adc	r27, r1
  f8:	80 3c       	cpi	r24, 0xC0	; 192
  fa:	27 e2       	ldi	r18, 0x27	; 39
  fc:	92 07       	cpc	r25, r18
  fe:	29 e0       	ldi	r18, 0x09	; 9
 100:	a2 07       	cpc	r26, r18
 102:	b1 05       	cpc	r27, r1
 104:	a0 f3       	brcs	.-24     	; 0xee <GetPulseWidth+0x8>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
 106:	80 3c       	cpi	r24, 0xC0	; 192
 108:	97 42       	sbci	r25, 0x27	; 39
 10a:	a9 40       	sbci	r26, 0x09	; 9
 10c:	b1 05       	cpc	r27, r1
 10e:	79 f1       	breq	.+94     	; 0x16e <GetPulseWidth+0x88>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
 110:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;			// This line start the counter to start counting time
 116:	1d bc       	out	0x2d, r1	; 45
 118:	1c bc       	out	0x2c, r1	; 44

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	dc 01       	movw	r26, r24
 120:	0a c0       	rjmp	.+20     	; 0x136 <GetPulseWidth+0x50>
	{
		if(US_PIN & (1<<US_ECHO_POS))
 122:	99 9b       	sbis	0x13, 1	; 19
 124:	0f c0       	rjmp	.+30     	; 0x144 <GetPulseWidth+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
 126:	2c b5       	in	r18, 0x2c	; 44
 128:	3d b5       	in	r19, 0x2d	; 45
 12a:	21 36       	cpi	r18, 0x61	; 97
 12c:	3a 4e       	sbci	r19, 0xEA	; 234
 12e:	50 f4       	brcc	.+20     	; 0x144 <GetPulseWidth+0x5e>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	a1 1d       	adc	r26, r1
 134:	b1 1d       	adc	r27, r1
 136:	80 3c       	cpi	r24, 0xC0	; 192
 138:	27 e2       	ldi	r18, 0x27	; 39
 13a:	92 07       	cpc	r25, r18
 13c:	29 e0       	ldi	r18, 0x09	; 9
 13e:	a2 07       	cpc	r26, r18
 140:	b1 05       	cpc	r27, r1
 142:	78 f3       	brcs	.-34     	; 0x122 <GetPulseWidth+0x3c>
		}
		else
		break;
	}

	if(i==600000)
 144:	80 3c       	cpi	r24, 0xC0	; 192
 146:	97 42       	sbci	r25, 0x27	; 39
 148:	a9 40       	sbci	r26, 0x09	; 9
 14a:	b1 05       	cpc	r27, r1
 14c:	99 f0       	breq	.+38     	; 0x174 <GetPulseWidth+0x8e>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
 14e:	8c b5       	in	r24, 0x2c	; 44
 150:	9d b5       	in	r25, 0x2d	; 45
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b0 e0       	ldi	r27, 0x00	; 0
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
 156:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 158:	81 36       	cpi	r24, 0x61	; 97
 15a:	2a ee       	ldi	r18, 0xEA	; 234
 15c:	92 07       	cpc	r25, r18
 15e:	a1 05       	cpc	r26, r1
 160:	b1 05       	cpc	r27, r1
 162:	58 f4       	brcc	.+22     	; 0x17a <GetPulseWidth+0x94>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
 164:	b6 95       	lsr	r27
 166:	a7 95       	ror	r26
 168:	97 95       	ror	r25
 16a:	87 95       	ror	r24
 16c:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	9f ef       	ldi	r25, 0xFF	; 255
 172:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
 174:	8e ef       	ldi	r24, 0xFE	; 254
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	08 95       	ret

	//Stop Timer
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
 17a:	8e ef       	ldi	r24, 0xFE	; 254
 17c:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 17e:	08 95       	ret

00000180 <lcd_command>:
{
	// in order to send command to the lcd first we need to write the command on the data pins. then set the RS pin to zero and enable pin to high
	// then wait for one microseconds and set the enable pin to low, this process repeats again. We're using 4 bit data communication but the data is 8-bit
	// so we will send the data divinding it into two section. Higher 4 bit and lower 4 bit
	// the following lines of codes are used to send higher 4 bits of data
	lcd_port = (lcd_port & 0x0F) | (cmnd & 0xF0);  // this line writes the command on the data pins of the lcd connected to th microcontroller portD pin 4 to 7
 180:	92 b3       	in	r25, 0x12	; 18
 182:	9f 70       	andi	r25, 0x0F	; 15
 184:	28 2f       	mov	r18, r24
 186:	20 7f       	andi	r18, 0xF0	; 240
 188:	92 2b       	or	r25, r18
 18a:	92 bb       	out	0x12, r25	; 18
	lcd_port &= ~ (1<<rs);
 18c:	92 b3       	in	r25, 0x12	; 18
 18e:	9e 7f       	andi	r25, 0xFE	; 254
 190:	92 bb       	out	0x12, r25	; 18
	lcd_port |= (1<<en);
 192:	92 b3       	in	r25, 0x12	; 18
 194:	92 60       	ori	r25, 0x02	; 2
 196:	92 bb       	out	0x12, r25	; 18
 198:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 19a:	92 b3       	in	r25, 0x12	; 18
 19c:	9d 7f       	andi	r25, 0xFD	; 253
 19e:	92 bb       	out	0x12, r25	; 18
 1a0:	32 e4       	ldi	r19, 0x42	; 66
 1a2:	3a 95       	dec	r19
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_command+0x22>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_command+0x28>
	
	// wait 200 microseconds
	_delay_us(200);
	
	// send the lower 4 bit of the data
	lcd_port = (lcd_port & 0x0F) | (cmnd << 4);
 1a8:	22 b3       	in	r18, 0x12	; 18
 1aa:	30 e1       	ldi	r19, 0x10	; 16
 1ac:	83 9f       	mul	r24, r19
 1ae:	c0 01       	movw	r24, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	92 2f       	mov	r25, r18
 1b4:	9f 70       	andi	r25, 0x0F	; 15
 1b6:	89 2b       	or	r24, r25
 1b8:	82 bb       	out	0x12, r24	; 18
	lcd_port |= (1<<en);
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	8d 7f       	andi	r24, 0xFD	; 253
 1c6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	83 ef       	ldi	r24, 0xF3	; 243
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_command+0x4c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_command+0x52>
 1d2:	00 00       	nop
 1d4:	08 95       	ret

000001d6 <initialize>:



void initialize (void)
{
	lcd_data_dir = 0xFF;     // this will set the LCD pins connected on the microcontroller as output
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	81 bb       	out	0x11, r24	; 17
 1da:	85 ea       	ldi	r24, 0xA5	; 165
 1dc:	9e e0       	ldi	r25, 0x0E	; 14
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <initialize+0x8>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <initialize+0xe>
 1e4:	00 00       	nop
	_delay_ms(15);           // to show data on the LCD we need to send commands first then the data
	lcd_command(0x02);       // this command returns the cursor to the first row and first column position
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
	lcd_command(0x28);       // please refer to this link to understand meaning of all the commands https://www.electronicsforu.com/technology-trends/learn-electronics/16x2-lcd-pinout-diagram
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
	lcd_command(0x0c);
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
	lcd_command(0x06);
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
	lcd_command(0x01);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
 204:	83 ef       	ldi	r24, 0xF3	; 243
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <initialize+0x32>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <initialize+0x38>
 20e:	00 00       	nop
 210:	08 95       	ret

00000212 <lcd_clear>:
	_delay_ms(2);
}

void lcd_clear()
{
	lcd_command (0x01);   // this line clears the LCD screen
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
 218:	83 ef       	ldi	r24, 0xF3	; 243
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_clear+0xa>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_clear+0x10>
 222:	00 00       	nop
	_delay_ms(2);         // waits for two milliseconds
	lcd_command (0x80);   // this line sets the cursor to the row 1 column 1
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
 22a:	08 95       	ret

0000022c <lcd_print>:
}


void lcd_print (char *str)
{
 22c:	fc 01       	movw	r30, r24
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	2c c0       	rjmp	.+88     	; 0x28c <lcd_print+0x60>
	{
		// we can not send the whole string to the LCD we need to send character by character
		// data sending is same as sending a command. there is one difference, in this case the RS pin will be set to HIGH while the RS pin was set to zero in case of the command sending
		lcd_port = (lcd_port & 0x0F) | (str[i] & 0xF0);
 234:	82 b3       	in	r24, 0x12	; 18
 236:	8f 70       	andi	r24, 0x0F	; 15
 238:	90 7f       	andi	r25, 0xF0	; 240
 23a:	98 2b       	or	r25, r24
 23c:	92 bb       	out	0x12, r25	; 18
		lcd_port |= (1<<rs);
 23e:	82 b3       	in	r24, 0x12	; 18
 240:	81 60       	ori	r24, 0x01	; 1
 242:	82 bb       	out	0x12, r24	; 18
		lcd_port|= (1<<en);
 244:	82 b3       	in	r24, 0x12	; 18
 246:	82 60       	ori	r24, 0x02	; 2
 248:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	8d 7f       	andi	r24, 0xFD	; 253
 250:	82 bb       	out	0x12, r24	; 18
 252:	82 e4       	ldi	r24, 0x42	; 66
 254:	8a 95       	dec	r24
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_print+0x28>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_print+0x2e>
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (str[i] << 4);
 25a:	42 b3       	in	r20, 0x12	; 18
 25c:	9c 91       	ld	r25, X
 25e:	80 e1       	ldi	r24, 0x10	; 16
 260:	98 9f       	mul	r25, r24
 262:	90 01       	movw	r18, r0
 264:	11 24       	eor	r1, r1
 266:	94 2f       	mov	r25, r20
 268:	9f 70       	andi	r25, 0x0F	; 15
 26a:	29 2b       	or	r18, r25
 26c:	22 bb       	out	0x12, r18	; 18
		lcd_port |= (1<<en);
 26e:	92 b3       	in	r25, 0x12	; 18
 270:	92 60       	ori	r25, 0x02	; 2
 272:	92 bb       	out	0x12, r25	; 18
 274:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 276:	92 b3       	in	r25, 0x12	; 18
 278:	9d 7f       	andi	r25, 0xFD	; 253
 27a:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	83 ef       	ldi	r24, 0xF3	; 243
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_print+0x54>
 284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_print+0x5a>
 286:	00 00       	nop

void lcd_print (char *str)
{
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	df 01       	movw	r26, r30
 28e:	a6 0f       	add	r26, r22
 290:	b7 1f       	adc	r27, r23
 292:	9c 91       	ld	r25, X
 294:	91 11       	cpse	r25, r1
 296:	ce cf       	rjmp	.-100    	; 0x234 <lcd_print+0x8>
		lcd_port |= (1<<en);
		_delay_us(1);
		lcd_port &= ~ (1<<en);
		_delay_ms(2);
	}
}
 298:	08 95       	ret

0000029a <lcd_setCursor>:



void lcd_setCursor(unsigned char x, unsigned char y){    // this function will be used to set cursor. the place where we want to display the data
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <lcd_setCursor+0x6>
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};    // the 16x2 LCD has two rows first row has a value of 0x80. So let's say we want to go to the seconds column of first row
 2a4:	90 e8       	ldi	r25, 0x80	; 128
 2a6:	99 83       	std	Y+1, r25	; 0x01
 2a8:	90 ec       	ldi	r25, 0xC0	; 192
 2aa:	9a 83       	std	Y+2, r25	; 0x02
	// we just need to send the command with adding 2 with the initial value. So, it will be (0x80 + 2) this is how the code works
	lcd_command(adr[y-1] + x-1);
 2ac:	e6 2f       	mov	r30, r22
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	2c 0f       	add	r18, r28
 2b8:	3d 1f       	adc	r19, r29
 2ba:	e2 0f       	add	r30, r18
 2bc:	f3 1f       	adc	r31, r19
 2be:	90 81       	ld	r25, Z
 2c0:	89 0f       	add	r24, r25
 2c2:	81 50       	subi	r24, 0x01	; 1
 2c4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	31 e2       	ldi	r19, 0x21	; 33
 2ca:	3a 95       	dec	r19
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_setCursor+0x30>
 2ce:	00 00       	nop
	_delay_us(100);
}
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <main>:

int main()
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0x6>
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <main+0x8>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xff;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	8a bb       	out	0x1a, r24	; 26
	initialize();           // we're initializing the LCD
 2ea:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initialize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	87 ea       	ldi	r24, 0xA7	; 167
 2f0:	91 e6       	ldi	r25, 0x61	; 97
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <main+0x18>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x1e>
 2f8:	00 00       	nop
		_delay_ms(100);	//Let the LCD Module start


		
		//Set io port direction of sensor
		HCSR04Init();
 2fa:	0e 94 65 00 	call	0xca	; 0xca <HCSR04Init>
		//PORTC |= 1 << led1;
		while(1)
		{
			
			//Send a trigger pulse
			HCSR04Trigger();               // calling the ultrasonic sound wave generator function
 2fe:	0e 94 69 00 	call	0xd2	; 0xd2 <HCSR04Trigger>

			//Measure the width of pulse
			r=GetPulseWidth();             // getting the duration of the ultrasound took to echo back after hitting the object
 302:	0e 94 73 00 	call	0xe6	; 0xe6 <GetPulseWidth>

			//Handle Errors
			if(r==US_ERROR)                // if microcontroller doesn't get any pulse then it will set the US_ERROR variable to -1
 306:	8f 3f       	cpi	r24, 0xFF	; 255
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	92 07       	cpc	r25, r18
 30c:	49 f4       	brne	.+18     	; 0x320 <main+0x46>
			// the following code will check if there is error then it will be displayed on the LCD screen
			{
				lcd_setCursor(1, 1);      //lcd_setCursor(column, row)
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_setCursor>
				lcd_print("Error!");
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_print>
 31e:	ef cf       	rjmp	.-34     	; 0x2fe <main+0x24>
			}
			else 
			{
				
				
				distance=(r*0.034/2.0);	// This will give the distance in centimeters
 320:	bc 01       	movw	r22, r24
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 37 02 	call	0x46e	; 0x46e <__floatunsisf>
 32a:	26 e9       	ldi	r18, 0x96	; 150
 32c:	33 e4       	ldi	r19, 0x43	; 67
 32e:	4b e0       	ldi	r20, 0x0B	; 11
 330:	5d e3       	ldi	r21, 0x3D	; 61
 332:	0e 94 9d 02 	call	0x53a	; 0x53a <__mulsf3>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	5f e3       	ldi	r21, 0x3F	; 63
 33e:	0e 94 9d 02 	call	0x53a	; 0x53a <__mulsf3>
 342:	0e 94 01 02 	call	0x402	; 0x402 <__fixsfsi>
 346:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <distance+0x1>
 34a:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <distance>
				
				
				if (distance != previous_distance)    // the LCD screen only need to be cleared if the distance is changed otherwise it is not required
 34e:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <previous_distance>
 352:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <previous_distance+0x1>
 356:	26 17       	cp	r18, r22
 358:	37 07       	cpc	r19, r23
 35a:	11 f0       	breq	.+4      	; 0x360 <main+0x86>
				{
					lcd_clear();
 35c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_clear>
					
				}
				
				lcd_setCursor(1, 1);      // set the row and column to display the data
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_setCursor>
				lcd_print("Water lv = ");
 368:	87 e0       	ldi	r24, 0x07	; 7
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_print>
				lcd_setCursor(12, 1);      //lcd_setCursor(column, row)
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8c e0       	ldi	r24, 0x0C	; 12
 374:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_setCursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 378:	4a e0       	ldi	r20, 0x0A	; 10
 37a:	be 01       	movw	r22, r28
 37c:	6f 5f       	subi	r22, 0xFF	; 255
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <distance>
 384:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <distance+0x1>
 388:	0e 94 32 03 	call	0x664	; 0x664 <__itoa_ncheck>
				itoa(distance, numberString, 10);    // distance is an integer number, we can not display integer directly on the LCD. this line converts integer into array of character
				lcd_print(numberString);
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_print>
				lcd_setCursor(14, 1);      //set the row to 1 and and column to 14 to display the data
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_setCursor>
				lcd_print(" cm");
 39c:	83 e1       	ldi	r24, 0x13	; 19
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_print>
				
				
				
				
				previous_distance = distance;
 3a4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <distance>
 3a8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <distance+0x1>
 3ac:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <previous_distance+0x1>
 3b0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <previous_distance>
 3b4:	8b e4       	ldi	r24, 0x4B	; 75
 3b6:	9d e1       	ldi	r25, 0x1D	; 29
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <main+0xde>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0xe4>
 3be:	00 00       	nop
				_delay_ms(30);
				
				if(distance<10)
 3c0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <distance>
 3c4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <distance+0x1>
 3c8:	0a 97       	sbiw	r24, 0x0a	; 10
 3ca:	54 f4       	brge	.+20     	; 0x3e0 <main+0x106>
				{
					lcd_setCursor(1, 2);
 3cc:	62 e0       	ldi	r22, 0x02	; 2
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_setCursor>
					lcd_print("WATER LOW!!!");
 3d4:	87 e1       	ldi	r24, 0x17	; 23
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_print>
					PORTA=(1<<PINA0);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	8b bb       	out	0x1b, r24	; 27
					
				}
				if(distance>=10)
 3e0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <distance>
 3e4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <distance+0x1>
 3e8:	0a 97       	sbiw	r24, 0x0a	; 10
 3ea:	0c f4       	brge	.+2      	; 0x3ee <main+0x114>
 3ec:	88 cf       	rjmp	.-240    	; 0x2fe <main+0x24>
				{
					lcd_setCursor(1, 2);
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_setCursor>
					lcd_print("ENOUGH WATER");
 3f6:	84 e2       	ldi	r24, 0x24	; 36
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_print>
					PORTA=(0<<PINA0);
 3fe:	1b ba       	out	0x1b, r1	; 27
 400:	7e cf       	rjmp	.-260    	; 0x2fe <main+0x24>

00000402 <__fixsfsi>:
 402:	0e 94 08 02 	call	0x410	; 0x410 <__fixunssfsi>
 406:	68 94       	set
 408:	b1 11       	cpse	r27, r1
 40a:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>
 40e:	08 95       	ret

00000410 <__fixunssfsi>:
 410:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_splitA>
 414:	88 f0       	brcs	.+34     	; 0x438 <__fixunssfsi+0x28>
 416:	9f 57       	subi	r25, 0x7F	; 127
 418:	98 f0       	brcs	.+38     	; 0x440 <__fixunssfsi+0x30>
 41a:	b9 2f       	mov	r27, r25
 41c:	99 27       	eor	r25, r25
 41e:	b7 51       	subi	r27, 0x17	; 23
 420:	b0 f0       	brcs	.+44     	; 0x44e <__fixunssfsi+0x3e>
 422:	e1 f0       	breq	.+56     	; 0x45c <__fixunssfsi+0x4c>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	1a f0       	brmi	.+6      	; 0x434 <__fixunssfsi+0x24>
 42e:	ba 95       	dec	r27
 430:	c9 f7       	brne	.-14     	; 0x424 <__fixunssfsi+0x14>
 432:	14 c0       	rjmp	.+40     	; 0x45c <__fixunssfsi+0x4c>
 434:	b1 30       	cpi	r27, 0x01	; 1
 436:	91 f0       	breq	.+36     	; 0x45c <__fixunssfsi+0x4c>
 438:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_zero>
 43c:	b1 e0       	ldi	r27, 0x01	; 1
 43e:	08 95       	ret
 440:	0c 94 96 02 	jmp	0x52c	; 0x52c <__fp_zero>
 444:	67 2f       	mov	r22, r23
 446:	78 2f       	mov	r23, r24
 448:	88 27       	eor	r24, r24
 44a:	b8 5f       	subi	r27, 0xF8	; 248
 44c:	39 f0       	breq	.+14     	; 0x45c <__fixunssfsi+0x4c>
 44e:	b9 3f       	cpi	r27, 0xF9	; 249
 450:	cc f3       	brlt	.-14     	; 0x444 <__fixunssfsi+0x34>
 452:	86 95       	lsr	r24
 454:	77 95       	ror	r23
 456:	67 95       	ror	r22
 458:	b3 95       	inc	r27
 45a:	d9 f7       	brne	.-10     	; 0x452 <__fixunssfsi+0x42>
 45c:	3e f4       	brtc	.+14     	; 0x46c <__fixunssfsi+0x5c>
 45e:	90 95       	com	r25
 460:	80 95       	com	r24
 462:	70 95       	com	r23
 464:	61 95       	neg	r22
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	8f 4f       	sbci	r24, 0xFF	; 255
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	08 95       	ret

0000046e <__floatunsisf>:
 46e:	e8 94       	clt
 470:	09 c0       	rjmp	.+18     	; 0x484 <__floatsisf+0x12>

00000472 <__floatsisf>:
 472:	97 fb       	bst	r25, 7
 474:	3e f4       	brtc	.+14     	; 0x484 <__floatsisf+0x12>
 476:	90 95       	com	r25
 478:	80 95       	com	r24
 47a:	70 95       	com	r23
 47c:	61 95       	neg	r22
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	8f 4f       	sbci	r24, 0xFF	; 255
 482:	9f 4f       	sbci	r25, 0xFF	; 255
 484:	99 23       	and	r25, r25
 486:	a9 f0       	breq	.+42     	; 0x4b2 <__floatsisf+0x40>
 488:	f9 2f       	mov	r31, r25
 48a:	96 e9       	ldi	r25, 0x96	; 150
 48c:	bb 27       	eor	r27, r27
 48e:	93 95       	inc	r25
 490:	f6 95       	lsr	r31
 492:	87 95       	ror	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	b7 95       	ror	r27
 49a:	f1 11       	cpse	r31, r1
 49c:	f8 cf       	rjmp	.-16     	; 0x48e <__floatsisf+0x1c>
 49e:	fa f4       	brpl	.+62     	; 0x4de <__floatsisf+0x6c>
 4a0:	bb 0f       	add	r27, r27
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__floatsisf+0x36>
 4a4:	60 ff       	sbrs	r22, 0
 4a6:	1b c0       	rjmp	.+54     	; 0x4de <__floatsisf+0x6c>
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	16 c0       	rjmp	.+44     	; 0x4de <__floatsisf+0x6c>
 4b2:	88 23       	and	r24, r24
 4b4:	11 f0       	breq	.+4      	; 0x4ba <__floatsisf+0x48>
 4b6:	96 e9       	ldi	r25, 0x96	; 150
 4b8:	11 c0       	rjmp	.+34     	; 0x4dc <__floatsisf+0x6a>
 4ba:	77 23       	and	r23, r23
 4bc:	21 f0       	breq	.+8      	; 0x4c6 <__floatsisf+0x54>
 4be:	9e e8       	ldi	r25, 0x8E	; 142
 4c0:	87 2f       	mov	r24, r23
 4c2:	76 2f       	mov	r23, r22
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <__floatsisf+0x5e>
 4c6:	66 23       	and	r22, r22
 4c8:	71 f0       	breq	.+28     	; 0x4e6 <__floatsisf+0x74>
 4ca:	96 e8       	ldi	r25, 0x86	; 134
 4cc:	86 2f       	mov	r24, r22
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	2a f0       	brmi	.+10     	; 0x4de <__floatsisf+0x6c>
 4d4:	9a 95       	dec	r25
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	da f7       	brpl	.-10     	; 0x4d4 <__floatsisf+0x62>
 4de:	88 0f       	add	r24, r24
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	97 f9       	bld	r25, 7
 4e6:	08 95       	ret

000004e8 <__fp_split3>:
 4e8:	57 fd       	sbrc	r21, 7
 4ea:	90 58       	subi	r25, 0x80	; 128
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	59 f0       	breq	.+22     	; 0x508 <__fp_splitA+0x10>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	71 f0       	breq	.+28     	; 0x512 <__fp_splitA+0x1a>
 4f6:	47 95       	ror	r20

000004f8 <__fp_splitA>:
 4f8:	88 0f       	add	r24, r24
 4fa:	97 fb       	bst	r25, 7
 4fc:	99 1f       	adc	r25, r25
 4fe:	61 f0       	breq	.+24     	; 0x518 <__fp_splitA+0x20>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	79 f0       	breq	.+30     	; 0x522 <__fp_splitA+0x2a>
 504:	87 95       	ror	r24
 506:	08 95       	ret
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	55 1f       	adc	r21, r21
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <__fp_split3+0xe>
 512:	46 95       	lsr	r20
 514:	f1 df       	rcall	.-30     	; 0x4f8 <__fp_splitA>
 516:	08 c0       	rjmp	.+16     	; 0x528 <__fp_splitA+0x30>
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	18 06       	cpc	r1, r24
 51e:	99 1f       	adc	r25, r25
 520:	f1 cf       	rjmp	.-30     	; 0x504 <__fp_splitA+0xc>
 522:	86 95       	lsr	r24
 524:	71 05       	cpc	r23, r1
 526:	61 05       	cpc	r22, r1
 528:	08 94       	sec
 52a:	08 95       	ret

0000052c <__fp_zero>:
 52c:	e8 94       	clt

0000052e <__fp_szero>:
 52e:	bb 27       	eor	r27, r27
 530:	66 27       	eor	r22, r22
 532:	77 27       	eor	r23, r23
 534:	cb 01       	movw	r24, r22
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__mulsf3>:
 53a:	0e 94 b0 02 	call	0x560	; 0x560 <__mulsf3x>
 53e:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_round>
 542:	0e 94 13 03 	call	0x626	; 0x626 <__fp_pscA>
 546:	38 f0       	brcs	.+14     	; 0x556 <__mulsf3+0x1c>
 548:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_pscB>
 54c:	20 f0       	brcs	.+8      	; 0x556 <__mulsf3+0x1c>
 54e:	95 23       	and	r25, r21
 550:	11 f0       	breq	.+4      	; 0x556 <__mulsf3+0x1c>
 552:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_inf>
 556:	0c 94 10 03 	jmp	0x620	; 0x620 <__fp_nan>
 55a:	11 24       	eor	r1, r1
 55c:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>

00000560 <__mulsf3x>:
 560:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fp_split3>
 564:	70 f3       	brcs	.-36     	; 0x542 <__mulsf3+0x8>

00000566 <__mulsf3_pse>:
 566:	95 9f       	mul	r25, r21
 568:	c1 f3       	breq	.-16     	; 0x55a <__mulsf3+0x20>
 56a:	95 0f       	add	r25, r21
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	55 1f       	adc	r21, r21
 570:	62 9f       	mul	r22, r18
 572:	f0 01       	movw	r30, r0
 574:	72 9f       	mul	r23, r18
 576:	bb 27       	eor	r27, r27
 578:	f0 0d       	add	r31, r0
 57a:	b1 1d       	adc	r27, r1
 57c:	63 9f       	mul	r22, r19
 57e:	aa 27       	eor	r26, r26
 580:	f0 0d       	add	r31, r0
 582:	b1 1d       	adc	r27, r1
 584:	aa 1f       	adc	r26, r26
 586:	64 9f       	mul	r22, r20
 588:	66 27       	eor	r22, r22
 58a:	b0 0d       	add	r27, r0
 58c:	a1 1d       	adc	r26, r1
 58e:	66 1f       	adc	r22, r22
 590:	82 9f       	mul	r24, r18
 592:	22 27       	eor	r18, r18
 594:	b0 0d       	add	r27, r0
 596:	a1 1d       	adc	r26, r1
 598:	62 1f       	adc	r22, r18
 59a:	73 9f       	mul	r23, r19
 59c:	b0 0d       	add	r27, r0
 59e:	a1 1d       	adc	r26, r1
 5a0:	62 1f       	adc	r22, r18
 5a2:	83 9f       	mul	r24, r19
 5a4:	a0 0d       	add	r26, r0
 5a6:	61 1d       	adc	r22, r1
 5a8:	22 1f       	adc	r18, r18
 5aa:	74 9f       	mul	r23, r20
 5ac:	33 27       	eor	r19, r19
 5ae:	a0 0d       	add	r26, r0
 5b0:	61 1d       	adc	r22, r1
 5b2:	23 1f       	adc	r18, r19
 5b4:	84 9f       	mul	r24, r20
 5b6:	60 0d       	add	r22, r0
 5b8:	21 1d       	adc	r18, r1
 5ba:	82 2f       	mov	r24, r18
 5bc:	76 2f       	mov	r23, r22
 5be:	6a 2f       	mov	r22, r26
 5c0:	11 24       	eor	r1, r1
 5c2:	9f 57       	subi	r25, 0x7F	; 127
 5c4:	50 40       	sbci	r21, 0x00	; 0
 5c6:	9a f0       	brmi	.+38     	; 0x5ee <__mulsf3_pse+0x88>
 5c8:	f1 f0       	breq	.+60     	; 0x606 <__mulsf3_pse+0xa0>
 5ca:	88 23       	and	r24, r24
 5cc:	4a f0       	brmi	.+18     	; 0x5e0 <__mulsf3_pse+0x7a>
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	bb 1f       	adc	r27, r27
 5d4:	66 1f       	adc	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	a9 f7       	brne	.-22     	; 0x5ca <__mulsf3_pse+0x64>
 5e0:	9e 3f       	cpi	r25, 0xFE	; 254
 5e2:	51 05       	cpc	r21, r1
 5e4:	80 f0       	brcs	.+32     	; 0x606 <__mulsf3_pse+0xa0>
 5e6:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_inf>
 5ea:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>
 5ee:	5f 3f       	cpi	r21, 0xFF	; 255
 5f0:	e4 f3       	brlt	.-8      	; 0x5ea <__mulsf3_pse+0x84>
 5f2:	98 3e       	cpi	r25, 0xE8	; 232
 5f4:	d4 f3       	brlt	.-12     	; 0x5ea <__mulsf3_pse+0x84>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f7 95       	ror	r31
 600:	e7 95       	ror	r30
 602:	9f 5f       	subi	r25, 0xFF	; 255
 604:	c1 f7       	brne	.-16     	; 0x5f6 <__mulsf3_pse+0x90>
 606:	fe 2b       	or	r31, r30
 608:	88 0f       	add	r24, r24
 60a:	91 1d       	adc	r25, r1
 60c:	96 95       	lsr	r25
 60e:	87 95       	ror	r24
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <__fp_inf>:
 614:	97 f9       	bld	r25, 7
 616:	9f 67       	ori	r25, 0x7F	; 127
 618:	80 e8       	ldi	r24, 0x80	; 128
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	08 95       	ret

00000620 <__fp_nan>:
 620:	9f ef       	ldi	r25, 0xFF	; 255
 622:	80 ec       	ldi	r24, 0xC0	; 192
 624:	08 95       	ret

00000626 <__fp_pscA>:
 626:	00 24       	eor	r0, r0
 628:	0a 94       	dec	r0
 62a:	16 16       	cp	r1, r22
 62c:	17 06       	cpc	r1, r23
 62e:	18 06       	cpc	r1, r24
 630:	09 06       	cpc	r0, r25
 632:	08 95       	ret

00000634 <__fp_pscB>:
 634:	00 24       	eor	r0, r0
 636:	0a 94       	dec	r0
 638:	12 16       	cp	r1, r18
 63a:	13 06       	cpc	r1, r19
 63c:	14 06       	cpc	r1, r20
 63e:	05 06       	cpc	r0, r21
 640:	08 95       	ret

00000642 <__fp_round>:
 642:	09 2e       	mov	r0, r25
 644:	03 94       	inc	r0
 646:	00 0c       	add	r0, r0
 648:	11 f4       	brne	.+4      	; 0x64e <__fp_round+0xc>
 64a:	88 23       	and	r24, r24
 64c:	52 f0       	brmi	.+20     	; 0x662 <__fp_round+0x20>
 64e:	bb 0f       	add	r27, r27
 650:	40 f4       	brcc	.+16     	; 0x662 <__fp_round+0x20>
 652:	bf 2b       	or	r27, r31
 654:	11 f4       	brne	.+4      	; 0x65a <__fp_round+0x18>
 656:	60 ff       	sbrs	r22, 0
 658:	04 c0       	rjmp	.+8      	; 0x662 <__fp_round+0x20>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__itoa_ncheck>:
 664:	bb 27       	eor	r27, r27
 666:	4a 30       	cpi	r20, 0x0A	; 10
 668:	31 f4       	brne	.+12     	; 0x676 <__itoa_ncheck+0x12>
 66a:	99 23       	and	r25, r25
 66c:	22 f4       	brpl	.+8      	; 0x676 <__itoa_ncheck+0x12>
 66e:	bd e2       	ldi	r27, 0x2D	; 45
 670:	90 95       	com	r25
 672:	81 95       	neg	r24
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__utoa_common>

0000067a <__utoa_ncheck>:
 67a:	bb 27       	eor	r27, r27

0000067c <__utoa_common>:
 67c:	fb 01       	movw	r30, r22
 67e:	55 27       	eor	r21, r21
 680:	aa 27       	eor	r26, r26
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	aa 1f       	adc	r26, r26
 688:	a4 17       	cp	r26, r20
 68a:	10 f0       	brcs	.+4      	; 0x690 <__utoa_common+0x14>
 68c:	a4 1b       	sub	r26, r20
 68e:	83 95       	inc	r24
 690:	50 51       	subi	r21, 0x10	; 16
 692:	b9 f7       	brne	.-18     	; 0x682 <__utoa_common+0x6>
 694:	a0 5d       	subi	r26, 0xD0	; 208
 696:	aa 33       	cpi	r26, 0x3A	; 58
 698:	08 f0       	brcs	.+2      	; 0x69c <__utoa_common+0x20>
 69a:	a9 5d       	subi	r26, 0xD9	; 217
 69c:	a1 93       	st	Z+, r26
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	79 f7       	brne	.-34     	; 0x680 <__utoa_common+0x4>
 6a2:	b1 11       	cpse	r27, r1
 6a4:	b1 93       	st	Z+, r27
 6a6:	11 92       	st	Z+, r1
 6a8:	cb 01       	movw	r24, r22
 6aa:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <strrev>

000006ae <strrev>:
 6ae:	dc 01       	movw	r26, r24
 6b0:	fc 01       	movw	r30, r24
 6b2:	67 2f       	mov	r22, r23
 6b4:	71 91       	ld	r23, Z+
 6b6:	77 23       	and	r23, r23
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <strrev+0x4>
 6ba:	32 97       	sbiw	r30, 0x02	; 2
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <strrev+0x18>
 6be:	7c 91       	ld	r23, X
 6c0:	6d 93       	st	X+, r22
 6c2:	70 83       	st	Z, r23
 6c4:	62 91       	ld	r22, -Z
 6c6:	ae 17       	cp	r26, r30
 6c8:	bf 07       	cpc	r27, r31
 6ca:	c8 f3       	brcs	.-14     	; 0x6be <strrev+0x10>
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
