
ULTRASONIC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000007b4  00000848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800092  00800092  0000087a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc8  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000755  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000574  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f1  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067a  00000000  00000000  00002891  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002f0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  8a:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HCSR04Init>:

void HCSR04Init()
{
	
	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<US_TRIG_POS);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	81 60       	ori	r24, 0x01	; 1
  96:	84 bb       	out	0x14, r24	; 20
  98:	08 95       	ret

0000009a <HCSR04Trigger>:

void HCSR04Trigger()
{   // this function will generate ultrasonic sound wave for 15 microseconds
	//Send a 10uS pulse on trigger line
	
	US_PORT|=(1<<US_TRIG_POS);	//high
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	80 e5       	ldi	r24, 0x50	; 80
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <HCSR04Trigger+0x8>
	
	_delay_us(15);				//wait 15uS
	
	US_PORT&=~(1<<US_TRIG_POS);	//low
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	85 bb       	out	0x15, r24	; 21
  ac:	08 95       	ret

000000ae <GetPulseWidth>:
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	dc 01       	movw	r26, r24
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <GetPulseWidth+0x12>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
  b6:	99 99       	sbic	0x13, 1	; 19
  b8:	0a c0       	rjmp	.+20     	; 0xce <GetPulseWidth+0x20>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	a1 1d       	adc	r26, r1
  be:	b1 1d       	adc	r27, r1
  c0:	80 3c       	cpi	r24, 0xC0	; 192
  c2:	27 e2       	ldi	r18, 0x27	; 39
  c4:	92 07       	cpc	r25, r18
  c6:	29 e0       	ldi	r18, 0x09	; 9
  c8:	a2 07       	cpc	r26, r18
  ca:	b1 05       	cpc	r27, r1
  cc:	a0 f3       	brcs	.-24     	; 0xb6 <GetPulseWidth+0x8>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
  ce:	80 3c       	cpi	r24, 0xC0	; 192
  d0:	97 42       	sbci	r25, 0x27	; 39
  d2:	a9 40       	sbci	r26, 0x09	; 9
  d4:	b1 05       	cpc	r27, r1
  d6:	79 f1       	breq	.+94     	; 0x136 <GetPulseWidth+0x88>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
  d8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;			// This line start the counter to start counting time
  de:	1d bc       	out	0x2d, r1	; 45
  e0:	1c bc       	out	0x2c, r1	; 44

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	dc 01       	movw	r26, r24
  e8:	0a c0       	rjmp	.+20     	; 0xfe <GetPulseWidth+0x50>
	{
		if(US_PIN & (1<<US_ECHO_POS))
  ea:	99 9b       	sbis	0x13, 1	; 19
  ec:	0f c0       	rjmp	.+30     	; 0x10c <GetPulseWidth+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
  ee:	2c b5       	in	r18, 0x2c	; 44
  f0:	3d b5       	in	r19, 0x2d	; 45
  f2:	21 36       	cpi	r18, 0x61	; 97
  f4:	3a 4e       	sbci	r19, 0xEA	; 234
  f6:	50 f4       	brcc	.+20     	; 0x10c <GetPulseWidth+0x5e>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	a1 1d       	adc	r26, r1
  fc:	b1 1d       	adc	r27, r1
  fe:	80 3c       	cpi	r24, 0xC0	; 192
 100:	27 e2       	ldi	r18, 0x27	; 39
 102:	92 07       	cpc	r25, r18
 104:	29 e0       	ldi	r18, 0x09	; 9
 106:	a2 07       	cpc	r26, r18
 108:	b1 05       	cpc	r27, r1
 10a:	78 f3       	brcs	.-34     	; 0xea <GetPulseWidth+0x3c>
		}
		else
		break;
	}

	if(i==600000)
 10c:	80 3c       	cpi	r24, 0xC0	; 192
 10e:	97 42       	sbci	r25, 0x27	; 39
 110:	a9 40       	sbci	r26, 0x09	; 9
 112:	b1 05       	cpc	r27, r1
 114:	99 f0       	breq	.+38     	; 0x13c <GetPulseWidth+0x8e>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
 116:	8c b5       	in	r24, 0x2c	; 44
 118:	9d b5       	in	r25, 0x2d	; 45
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e0       	ldi	r27, 0x00	; 0
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
 11e:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 120:	81 36       	cpi	r24, 0x61	; 97
 122:	2a ee       	ldi	r18, 0xEA	; 234
 124:	92 07       	cpc	r25, r18
 126:	a1 05       	cpc	r26, r1
 128:	b1 05       	cpc	r27, r1
 12a:	58 f4       	brcc	.+22     	; 0x142 <GetPulseWidth+0x94>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
 12c:	b6 95       	lsr	r27
 12e:	a7 95       	ror	r26
 130:	97 95       	ror	r25
 132:	87 95       	ror	r24
 134:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	9f ef       	ldi	r25, 0xFF	; 255
 13a:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	08 95       	ret

	//Stop Timer
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 146:	08 95       	ret

00000148 <lcd_command>:
{
	// in order to send command to the lcd first we need to write the command on the data pins. then set the RS pin to zero and enable pin to high
	// then wait for one microseconds and set the enable pin to low, this process repeats again. We're using 4 bit data communication but the data is 8-bit
	// so we will send the data divinding it into two section. Higher 4 bit and lower 4 bit
	// the following lines of codes are used to send higher 4 bits of data
	lcd_port = (lcd_port & 0x0F) | (cmnd & 0xF0);  // this line writes the command on the data pins of the lcd connected to th microcontroller portD pin 4 to 7
 148:	92 b3       	in	r25, 0x12	; 18
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	28 2f       	mov	r18, r24
 14e:	20 7f       	andi	r18, 0xF0	; 240
 150:	92 2b       	or	r25, r18
 152:	92 bb       	out	0x12, r25	; 18
	lcd_port &= ~ (1<<rs);
 154:	92 b3       	in	r25, 0x12	; 18
 156:	9e 7f       	andi	r25, 0xFE	; 254
 158:	92 bb       	out	0x12, r25	; 18
	lcd_port |= (1<<en);
 15a:	92 b3       	in	r25, 0x12	; 18
 15c:	92 60       	ori	r25, 0x02	; 2
 15e:	92 bb       	out	0x12, r25	; 18
 160:	35 e0       	ldi	r19, 0x05	; 5
 162:	3a 95       	dec	r19
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_command+0x1a>
 166:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 168:	92 b3       	in	r25, 0x12	; 18
 16a:	9d 7f       	andi	r25, 0xFD	; 253
 16c:	92 bb       	out	0x12, r25	; 18
 16e:	ef e1       	ldi	r30, 0x1F	; 31
 170:	f3 e0       	ldi	r31, 0x03	; 3
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_command+0x2a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_command+0x30>
 178:	00 00       	nop
	
	// wait 200 microseconds
	_delay_us(200);
	
	// send the lower 4 bit of the data
	lcd_port = (lcd_port & 0x0F) | (cmnd << 4);
 17a:	22 b3       	in	r18, 0x12	; 18
 17c:	f0 e1       	ldi	r31, 0x10	; 16
 17e:	8f 9f       	mul	r24, r31
 180:	c0 01       	movw	r24, r0
 182:	11 24       	eor	r1, r1
 184:	92 2f       	mov	r25, r18
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	89 2b       	or	r24, r25
 18a:	82 bb       	out	0x12, r24	; 18
	lcd_port |= (1<<en);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	82 bb       	out	0x12, r24	; 18
 192:	35 e0       	ldi	r19, 0x05	; 5
 194:	3a 95       	dec	r19
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_command+0x4c>
 198:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9f e1       	ldi	r25, 0x1F	; 31
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_command+0x5c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_command+0x62>
 1aa:	00 00       	nop
 1ac:	08 95       	ret

000001ae <initialize>:



void initialize (void)
{
	lcd_data_dir = 0xFF;     // this will set the LCD pins connected on the microcontroller as output
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	8f e5       	ldi	r24, 0x5F	; 95
 1b4:	9a ee       	ldi	r25, 0xEA	; 234
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <initialize+0x8>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <initialize+0xe>
 1bc:	00 00       	nop
	_delay_ms(15);           // to show data on the LCD we need to send commands first then the data
	lcd_command(0x02);       // this command returns the cursor to the first row and first column position
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x28);       // please refer to this link to understand meaning of all the commands https://www.electronicsforu.com/technology-trends/learn-electronics/16x2-lcd-pinout-diagram
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x0c);
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x06);
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9f e1       	ldi	r25, 0x1F	; 31
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <initialize+0x32>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <initialize+0x38>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <lcd_clear>:
	_delay_ms(2);
}

void lcd_clear()
{
	lcd_command (0x01);   // this line clears the LCD screen
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9f e1       	ldi	r25, 0x1F	; 31
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_clear+0xa>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_clear+0x10>
 1fa:	00 00       	nop
	_delay_ms(2);         // waits for two milliseconds
	lcd_command (0x80);   // this line sets the cursor to the row 1 column 1
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 202:	08 95       	ret

00000204 <lcd_print>:
}


void lcd_print (char *str)
{
 204:	fc 01       	movw	r30, r24
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	34 c0       	rjmp	.+104    	; 0x274 <lcd_print+0x70>
	{
		// we can not send the whole string to the LCD we need to send character by character
		// data sending is same as sending a command. there is one difference, in this case the RS pin will be set to HIGH while the RS pin was set to zero in case of the command sending
		lcd_port = (lcd_port & 0x0F) | (str[i] & 0xF0);
 20c:	82 b3       	in	r24, 0x12	; 18
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	98 2b       	or	r25, r24
 214:	92 bb       	out	0x12, r25	; 18
		lcd_port |= (1<<rs);
 216:	82 b3       	in	r24, 0x12	; 18
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	82 bb       	out	0x12, r24	; 18
		lcd_port|= (1<<en);
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_print+0x20>
 228:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	82 bb       	out	0x12, r24	; 18
 230:	8f e1       	ldi	r24, 0x1F	; 31
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_print+0x30>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_print+0x36>
 23a:	00 00       	nop
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (str[i] << 4);
 23c:	42 b3       	in	r20, 0x12	; 18
 23e:	9c 91       	ld	r25, X
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	98 9f       	mul	r25, r24
 244:	90 01       	movw	r18, r0
 246:	11 24       	eor	r1, r1
 248:	94 2f       	mov	r25, r20
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	29 2b       	or	r18, r25
 24e:	22 bb       	out	0x12, r18	; 18
		lcd_port |= (1<<en);
 250:	92 b3       	in	r25, 0x12	; 18
 252:	92 60       	ori	r25, 0x02	; 2
 254:	92 bb       	out	0x12, r25	; 18
 256:	95 e0       	ldi	r25, 0x05	; 5
 258:	9a 95       	dec	r25
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_print+0x54>
 25c:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 25e:	92 b3       	in	r25, 0x12	; 18
 260:	9d 7f       	andi	r25, 0xFD	; 253
 262:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	9f e1       	ldi	r25, 0x1F	; 31
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_print+0x64>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_print+0x6a>
 26e:	00 00       	nop

void lcd_print (char *str)
{
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 270:	6f 5f       	subi	r22, 0xFF	; 255
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	df 01       	movw	r26, r30
 276:	a6 0f       	add	r26, r22
 278:	b7 1f       	adc	r27, r23
 27a:	9c 91       	ld	r25, X
 27c:	91 11       	cpse	r25, r1
 27e:	c6 cf       	rjmp	.-116    	; 0x20c <lcd_print+0x8>
		lcd_port |= (1<<en);
		_delay_us(1);
		lcd_port &= ~ (1<<en);
		_delay_ms(2);
	}
}
 280:	08 95       	ret

00000282 <lcd_setCursor>:



void lcd_setCursor(unsigned char x, unsigned char y){    // this function will be used to set cursor. the place where we want to display the data
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <lcd_setCursor+0x6>
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};    // the 16x2 LCD has two rows first row has a value of 0x80. So let's say we want to go to the seconds column of first row
 28c:	90 e8       	ldi	r25, 0x80	; 128
 28e:	99 83       	std	Y+1, r25	; 0x01
 290:	90 ec       	ldi	r25, 0xC0	; 192
 292:	9a 83       	std	Y+2, r25	; 0x02
	// we just need to send the command with adding 2 with the initial value. So, it will be (0x80 + 2) this is how the code works
	lcd_command(adr[y-1] + x-1);
 294:	e6 2f       	mov	r30, r22
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	2c 0f       	add	r18, r28
 2a0:	3d 1f       	adc	r19, r29
 2a2:	e2 0f       	add	r30, r18
 2a4:	f3 1f       	adc	r31, r19
 2a6:	90 81       	ld	r25, Z
 2a8:	89 0f       	add	r24, r25
 2aa:	81 50       	subi	r24, 0x01	; 1
 2ac:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e8       	ldi	r24, 0x8F	; 143
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_setCursor+0x32>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_setCursor+0x38>
 2ba:	00 00       	nop
	_delay_us(100);
}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <main>:

int main()
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <main+0x6>
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <main+0x8>
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xff;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	8a bb       	out	0x1a, r24	; 26
	initialize();           // we're initializing the LCD
 2d6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <initialize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	81 ee       	ldi	r24, 0xE1	; 225
 2de:	94 e0       	ldi	r25, 0x04	; 4
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x1a>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0x24>
 2ea:	00 00       	nop
		_delay_ms(100);	//Let the LCD Module start


		
		//Set io port direction of sensor
		HCSR04Init();
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <HCSR04Init>
		//PORTC |= 1 << led1;
		while(1)
		{
			
			//Send a trigger pulse
			HCSR04Trigger();               // calling the ultrasonic sound wave generator function
 2f0:	0e 94 4d 00 	call	0x9a	; 0x9a <HCSR04Trigger>

			//Measure the width of pulse
			r=GetPulseWidth();             // getting the duration of the ultrasound took to echo back after hitting the object
 2f4:	0e 94 57 00 	call	0xae	; 0xae <GetPulseWidth>

			//Handle Errors
			if(r==US_ERROR)                // if microcontroller doesn't get any pulse then it will set the US_ERROR variable to -1
 2f8:	8f 3f       	cpi	r24, 0xFF	; 255
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	92 07       	cpc	r25, r18
 2fe:	49 f4       	brne	.+18     	; 0x312 <main+0x4c>
			// the following code will check if there is error then it will be displayed on the LCD screen
			{
				lcd_setCursor(1, 1);      //lcd_setCursor(column, row)
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
				lcd_print("Error!");
 308:	80 e6       	ldi	r24, 0x60	; 96
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
 310:	ef cf       	rjmp	.-34     	; 0x2f0 <main+0x2a>
			}
			else 
			{
				
				distance=50-(r*0.034/2.0);	// This will give the distance in centimeters
 312:	bc 01       	movw	r22, r24
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 a8 02 	call	0x550	; 0x550 <__floatunsisf>
 31c:	26 e9       	ldi	r18, 0x96	; 150
 31e:	33 e4       	ldi	r19, 0x43	; 67
 320:	4b e0       	ldi	r20, 0x0B	; 11
 322:	5d e3       	ldi	r21, 0x3D	; 61
 324:	0e 94 36 03 	call	0x66c	; 0x66c <__mulsf3>
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	5f e3       	ldi	r21, 0x3F	; 63
 330:	0e 94 36 03 	call	0x66c	; 0x66c <__mulsf3>
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	88 e4       	ldi	r24, 0x48	; 72
 33e:	92 e4       	ldi	r25, 0x42	; 66
 340:	0e 94 05 02 	call	0x40a	; 0x40a <__subsf3>
 344:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fixsfsi>
 348:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <distance+0x1>
 34c:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <distance>
				
			   
				
				if (distance != previous_distance)    // the LCD screen only need to be cleared if the distance is changed otherwise it is not required
 350:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__data_end>
 354:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__data_end+0x1>
 358:	26 17       	cp	r18, r22
 35a:	37 07       	cpc	r19, r23
 35c:	11 f0       	breq	.+4      	; 0x362 <main+0x9c>
				{
					lcd_clear();
 35e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_clear>
				}
				
				lcd_setCursor(1, 1);      // set the row and column to display the data
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
				lcd_print("Water lv = ");
 36a:	87 e6       	ldi	r24, 0x67	; 103
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
				lcd_setCursor(12, 1);      //lcd_setCursor(column, row)
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	8c e0       	ldi	r24, 0x0C	; 12
 376:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 37a:	4a e0       	ldi	r20, 0x0A	; 10
 37c:	be 01       	movw	r22, r28
 37e:	6f 5f       	subi	r22, 0xFF	; 255
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <distance>
 386:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <distance+0x1>
 38a:	0e 94 a3 03 	call	0x746	; 0x746 <__itoa_ncheck>
				itoa(distance, numberString, 10);    // distance is an integer number, we can not display integer directly on the LCD. this line converts integer into array of character
				lcd_print(numberString);
 38e:	ce 01       	movw	r24, r28
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
				lcd_setCursor(14, 1);      //set the row to 1 and and column to 14 to display the data
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	8e e0       	ldi	r24, 0x0E	; 14
 39a:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
				lcd_print(" cm");
 39e:	83 e7       	ldi	r24, 0x73	; 115
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
				
				
				
				
				previous_distance = distance;
 3a6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <distance>
 3aa:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <distance+0x1>
 3ae:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 3b2:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	96 e7       	ldi	r25, 0x76	; 118
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	81 50       	subi	r24, 0x01	; 1
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	20 40       	sbci	r18, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <main+0xf6>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x100>
 3c6:	00 00       	nop
				_delay_ms(30);
				
				if(distance<10)
 3c8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <distance>
 3cc:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <distance+0x1>
 3d0:	0a 97       	sbiw	r24, 0x0a	; 10
 3d2:	54 f4       	brge	.+20     	; 0x3e8 <main+0x122>
				{
					lcd_setCursor(1, 2);
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
					lcd_print("WATER LOW!!!");
 3dc:	87 e7       	ldi	r24, 0x77	; 119
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
					PORTA=(1<<PINA0);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	8b bb       	out	0x1b, r24	; 27
					
				}
				if(distance>=10)
 3e8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <distance>
 3ec:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <distance+0x1>
 3f0:	0a 97       	sbiw	r24, 0x0a	; 10
 3f2:	0c f4       	brge	.+2      	; 0x3f6 <main+0x130>
 3f4:	7d cf       	rjmp	.-262    	; 0x2f0 <main+0x2a>
				{
					lcd_setCursor(1, 2);
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
					lcd_print("ENOUGH WATER");
 3fe:	84 e8       	ldi	r24, 0x84	; 132
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
					PORTA=(0<<PINA0);
 406:	1b ba       	out	0x1b, r1	; 27
 408:	73 cf       	rjmp	.-282    	; 0x2f0 <main+0x2a>

0000040a <__subsf3>:
 40a:	50 58       	subi	r21, 0x80	; 128

0000040c <__addsf3>:
 40c:	bb 27       	eor	r27, r27
 40e:	aa 27       	eor	r26, r26
 410:	0e 94 1d 02 	call	0x43a	; 0x43a <__addsf3x>
 414:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_round>
 418:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fp_pscA>
 41c:	38 f0       	brcs	.+14     	; 0x42c <__addsf3+0x20>
 41e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_pscB>
 422:	20 f0       	brcs	.+8      	; 0x42c <__addsf3+0x20>
 424:	39 f4       	brne	.+14     	; 0x434 <__addsf3+0x28>
 426:	9f 3f       	cpi	r25, 0xFF	; 255
 428:	19 f4       	brne	.+6      	; 0x430 <__addsf3+0x24>
 42a:	26 f4       	brtc	.+8      	; 0x434 <__addsf3+0x28>
 42c:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_nan>
 430:	0e f4       	brtc	.+2      	; 0x434 <__addsf3+0x28>
 432:	e0 95       	com	r30
 434:	e7 fb       	bst	r30, 7
 436:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_inf>

0000043a <__addsf3x>:
 43a:	e9 2f       	mov	r30, r25
 43c:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_split3>
 440:	58 f3       	brcs	.-42     	; 0x418 <__addsf3+0xc>
 442:	ba 17       	cp	r27, r26
 444:	62 07       	cpc	r22, r18
 446:	73 07       	cpc	r23, r19
 448:	84 07       	cpc	r24, r20
 44a:	95 07       	cpc	r25, r21
 44c:	20 f0       	brcs	.+8      	; 0x456 <__addsf3x+0x1c>
 44e:	79 f4       	brne	.+30     	; 0x46e <__addsf3x+0x34>
 450:	a6 f5       	brtc	.+104    	; 0x4ba <__addsf3x+0x80>
 452:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_zero>
 456:	0e f4       	brtc	.+2      	; 0x45a <__addsf3x+0x20>
 458:	e0 95       	com	r30
 45a:	0b 2e       	mov	r0, r27
 45c:	ba 2f       	mov	r27, r26
 45e:	a0 2d       	mov	r26, r0
 460:	0b 01       	movw	r0, r22
 462:	b9 01       	movw	r22, r18
 464:	90 01       	movw	r18, r0
 466:	0c 01       	movw	r0, r24
 468:	ca 01       	movw	r24, r20
 46a:	a0 01       	movw	r20, r0
 46c:	11 24       	eor	r1, r1
 46e:	ff 27       	eor	r31, r31
 470:	59 1b       	sub	r21, r25
 472:	99 f0       	breq	.+38     	; 0x49a <__addsf3x+0x60>
 474:	59 3f       	cpi	r21, 0xF9	; 249
 476:	50 f4       	brcc	.+20     	; 0x48c <__addsf3x+0x52>
 478:	50 3e       	cpi	r21, 0xE0	; 224
 47a:	68 f1       	brcs	.+90     	; 0x4d6 <__addsf3x+0x9c>
 47c:	1a 16       	cp	r1, r26
 47e:	f0 40       	sbci	r31, 0x00	; 0
 480:	a2 2f       	mov	r26, r18
 482:	23 2f       	mov	r18, r19
 484:	34 2f       	mov	r19, r20
 486:	44 27       	eor	r20, r20
 488:	58 5f       	subi	r21, 0xF8	; 248
 48a:	f3 cf       	rjmp	.-26     	; 0x472 <__addsf3x+0x38>
 48c:	46 95       	lsr	r20
 48e:	37 95       	ror	r19
 490:	27 95       	ror	r18
 492:	a7 95       	ror	r26
 494:	f0 40       	sbci	r31, 0x00	; 0
 496:	53 95       	inc	r21
 498:	c9 f7       	brne	.-14     	; 0x48c <__addsf3x+0x52>
 49a:	7e f4       	brtc	.+30     	; 0x4ba <__addsf3x+0x80>
 49c:	1f 16       	cp	r1, r31
 49e:	ba 0b       	sbc	r27, r26
 4a0:	62 0b       	sbc	r22, r18
 4a2:	73 0b       	sbc	r23, r19
 4a4:	84 0b       	sbc	r24, r20
 4a6:	ba f0       	brmi	.+46     	; 0x4d6 <__addsf3x+0x9c>
 4a8:	91 50       	subi	r25, 0x01	; 1
 4aa:	a1 f0       	breq	.+40     	; 0x4d4 <__addsf3x+0x9a>
 4ac:	ff 0f       	add	r31, r31
 4ae:	bb 1f       	adc	r27, r27
 4b0:	66 1f       	adc	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	c2 f7       	brpl	.-16     	; 0x4a8 <__addsf3x+0x6e>
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <__addsf3x+0x9c>
 4ba:	ba 0f       	add	r27, r26
 4bc:	62 1f       	adc	r22, r18
 4be:	73 1f       	adc	r23, r19
 4c0:	84 1f       	adc	r24, r20
 4c2:	48 f4       	brcc	.+18     	; 0x4d6 <__addsf3x+0x9c>
 4c4:	87 95       	ror	r24
 4c6:	77 95       	ror	r23
 4c8:	67 95       	ror	r22
 4ca:	b7 95       	ror	r27
 4cc:	f7 95       	ror	r31
 4ce:	9e 3f       	cpi	r25, 0xFE	; 254
 4d0:	08 f0       	brcs	.+2      	; 0x4d4 <__addsf3x+0x9a>
 4d2:	b0 cf       	rjmp	.-160    	; 0x434 <__addsf3+0x28>
 4d4:	93 95       	inc	r25
 4d6:	88 0f       	add	r24, r24
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__addsf3x+0xa2>
 4da:	99 27       	eor	r25, r25
 4dc:	ee 0f       	add	r30, r30
 4de:	97 95       	ror	r25
 4e0:	87 95       	ror	r24
 4e2:	08 95       	ret

000004e4 <__fixsfsi>:
 4e4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fixunssfsi>
 4e8:	68 94       	set
 4ea:	b1 11       	cpse	r27, r1
 4ec:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_szero>
 4f0:	08 95       	ret

000004f2 <__fixunssfsi>:
 4f2:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_splitA>
 4f6:	88 f0       	brcs	.+34     	; 0x51a <__fixunssfsi+0x28>
 4f8:	9f 57       	subi	r25, 0x7F	; 127
 4fa:	98 f0       	brcs	.+38     	; 0x522 <__fixunssfsi+0x30>
 4fc:	b9 2f       	mov	r27, r25
 4fe:	99 27       	eor	r25, r25
 500:	b7 51       	subi	r27, 0x17	; 23
 502:	b0 f0       	brcs	.+44     	; 0x530 <__fixunssfsi+0x3e>
 504:	e1 f0       	breq	.+56     	; 0x53e <__fixunssfsi+0x4c>
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	88 1f       	adc	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	1a f0       	brmi	.+6      	; 0x516 <__fixunssfsi+0x24>
 510:	ba 95       	dec	r27
 512:	c9 f7       	brne	.-14     	; 0x506 <__fixunssfsi+0x14>
 514:	14 c0       	rjmp	.+40     	; 0x53e <__fixunssfsi+0x4c>
 516:	b1 30       	cpi	r27, 0x01	; 1
 518:	91 f0       	breq	.+36     	; 0x53e <__fixunssfsi+0x4c>
 51a:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_zero>
 51e:	b1 e0       	ldi	r27, 0x01	; 1
 520:	08 95       	ret
 522:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_zero>
 526:	67 2f       	mov	r22, r23
 528:	78 2f       	mov	r23, r24
 52a:	88 27       	eor	r24, r24
 52c:	b8 5f       	subi	r27, 0xF8	; 248
 52e:	39 f0       	breq	.+14     	; 0x53e <__fixunssfsi+0x4c>
 530:	b9 3f       	cpi	r27, 0xF9	; 249
 532:	cc f3       	brlt	.-14     	; 0x526 <__fixunssfsi+0x34>
 534:	86 95       	lsr	r24
 536:	77 95       	ror	r23
 538:	67 95       	ror	r22
 53a:	b3 95       	inc	r27
 53c:	d9 f7       	brne	.-10     	; 0x534 <__fixunssfsi+0x42>
 53e:	3e f4       	brtc	.+14     	; 0x54e <__fixunssfsi+0x5c>
 540:	90 95       	com	r25
 542:	80 95       	com	r24
 544:	70 95       	com	r23
 546:	61 95       	neg	r22
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	08 95       	ret

00000550 <__floatunsisf>:
 550:	e8 94       	clt
 552:	09 c0       	rjmp	.+18     	; 0x566 <__floatsisf+0x12>

00000554 <__floatsisf>:
 554:	97 fb       	bst	r25, 7
 556:	3e f4       	brtc	.+14     	; 0x566 <__floatsisf+0x12>
 558:	90 95       	com	r25
 55a:	80 95       	com	r24
 55c:	70 95       	com	r23
 55e:	61 95       	neg	r22
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	99 23       	and	r25, r25
 568:	a9 f0       	breq	.+42     	; 0x594 <__floatsisf+0x40>
 56a:	f9 2f       	mov	r31, r25
 56c:	96 e9       	ldi	r25, 0x96	; 150
 56e:	bb 27       	eor	r27, r27
 570:	93 95       	inc	r25
 572:	f6 95       	lsr	r31
 574:	87 95       	ror	r24
 576:	77 95       	ror	r23
 578:	67 95       	ror	r22
 57a:	b7 95       	ror	r27
 57c:	f1 11       	cpse	r31, r1
 57e:	f8 cf       	rjmp	.-16     	; 0x570 <__floatsisf+0x1c>
 580:	fa f4       	brpl	.+62     	; 0x5c0 <__floatsisf+0x6c>
 582:	bb 0f       	add	r27, r27
 584:	11 f4       	brne	.+4      	; 0x58a <__floatsisf+0x36>
 586:	60 ff       	sbrs	r22, 0
 588:	1b c0       	rjmp	.+54     	; 0x5c0 <__floatsisf+0x6c>
 58a:	6f 5f       	subi	r22, 0xFF	; 255
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	8f 4f       	sbci	r24, 0xFF	; 255
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	16 c0       	rjmp	.+44     	; 0x5c0 <__floatsisf+0x6c>
 594:	88 23       	and	r24, r24
 596:	11 f0       	breq	.+4      	; 0x59c <__floatsisf+0x48>
 598:	96 e9       	ldi	r25, 0x96	; 150
 59a:	11 c0       	rjmp	.+34     	; 0x5be <__floatsisf+0x6a>
 59c:	77 23       	and	r23, r23
 59e:	21 f0       	breq	.+8      	; 0x5a8 <__floatsisf+0x54>
 5a0:	9e e8       	ldi	r25, 0x8E	; 142
 5a2:	87 2f       	mov	r24, r23
 5a4:	76 2f       	mov	r23, r22
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <__floatsisf+0x5e>
 5a8:	66 23       	and	r22, r22
 5aa:	71 f0       	breq	.+28     	; 0x5c8 <__floatsisf+0x74>
 5ac:	96 e8       	ldi	r25, 0x86	; 134
 5ae:	86 2f       	mov	r24, r22
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	2a f0       	brmi	.+10     	; 0x5c0 <__floatsisf+0x6c>
 5b6:	9a 95       	dec	r25
 5b8:	66 0f       	add	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	88 1f       	adc	r24, r24
 5be:	da f7       	brpl	.-10     	; 0x5b6 <__floatsisf+0x62>
 5c0:	88 0f       	add	r24, r24
 5c2:	96 95       	lsr	r25
 5c4:	87 95       	ror	r24
 5c6:	97 f9       	bld	r25, 7
 5c8:	08 95       	ret

000005ca <__fp_inf>:
 5ca:	97 f9       	bld	r25, 7
 5cc:	9f 67       	ori	r25, 0x7F	; 127
 5ce:	80 e8       	ldi	r24, 0x80	; 128
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	08 95       	ret

000005d6 <__fp_nan>:
 5d6:	9f ef       	ldi	r25, 0xFF	; 255
 5d8:	80 ec       	ldi	r24, 0xC0	; 192
 5da:	08 95       	ret

000005dc <__fp_pscA>:
 5dc:	00 24       	eor	r0, r0
 5de:	0a 94       	dec	r0
 5e0:	16 16       	cp	r1, r22
 5e2:	17 06       	cpc	r1, r23
 5e4:	18 06       	cpc	r1, r24
 5e6:	09 06       	cpc	r0, r25
 5e8:	08 95       	ret

000005ea <__fp_pscB>:
 5ea:	00 24       	eor	r0, r0
 5ec:	0a 94       	dec	r0
 5ee:	12 16       	cp	r1, r18
 5f0:	13 06       	cpc	r1, r19
 5f2:	14 06       	cpc	r1, r20
 5f4:	05 06       	cpc	r0, r21
 5f6:	08 95       	ret

000005f8 <__fp_round>:
 5f8:	09 2e       	mov	r0, r25
 5fa:	03 94       	inc	r0
 5fc:	00 0c       	add	r0, r0
 5fe:	11 f4       	brne	.+4      	; 0x604 <__fp_round+0xc>
 600:	88 23       	and	r24, r24
 602:	52 f0       	brmi	.+20     	; 0x618 <__fp_round+0x20>
 604:	bb 0f       	add	r27, r27
 606:	40 f4       	brcc	.+16     	; 0x618 <__fp_round+0x20>
 608:	bf 2b       	or	r27, r31
 60a:	11 f4       	brne	.+4      	; 0x610 <__fp_round+0x18>
 60c:	60 ff       	sbrs	r22, 0
 60e:	04 c0       	rjmp	.+8      	; 0x618 <__fp_round+0x20>
 610:	6f 5f       	subi	r22, 0xFF	; 255
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	8f 4f       	sbci	r24, 0xFF	; 255
 616:	9f 4f       	sbci	r25, 0xFF	; 255
 618:	08 95       	ret

0000061a <__fp_split3>:
 61a:	57 fd       	sbrc	r21, 7
 61c:	90 58       	subi	r25, 0x80	; 128
 61e:	44 0f       	add	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	59 f0       	breq	.+22     	; 0x63a <__fp_splitA+0x10>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	71 f0       	breq	.+28     	; 0x644 <__fp_splitA+0x1a>
 628:	47 95       	ror	r20

0000062a <__fp_splitA>:
 62a:	88 0f       	add	r24, r24
 62c:	97 fb       	bst	r25, 7
 62e:	99 1f       	adc	r25, r25
 630:	61 f0       	breq	.+24     	; 0x64a <__fp_splitA+0x20>
 632:	9f 3f       	cpi	r25, 0xFF	; 255
 634:	79 f0       	breq	.+30     	; 0x654 <__fp_splitA+0x2a>
 636:	87 95       	ror	r24
 638:	08 95       	ret
 63a:	12 16       	cp	r1, r18
 63c:	13 06       	cpc	r1, r19
 63e:	14 06       	cpc	r1, r20
 640:	55 1f       	adc	r21, r21
 642:	f2 cf       	rjmp	.-28     	; 0x628 <__fp_split3+0xe>
 644:	46 95       	lsr	r20
 646:	f1 df       	rcall	.-30     	; 0x62a <__fp_splitA>
 648:	08 c0       	rjmp	.+16     	; 0x65a <__fp_splitA+0x30>
 64a:	16 16       	cp	r1, r22
 64c:	17 06       	cpc	r1, r23
 64e:	18 06       	cpc	r1, r24
 650:	99 1f       	adc	r25, r25
 652:	f1 cf       	rjmp	.-30     	; 0x636 <__fp_splitA+0xc>
 654:	86 95       	lsr	r24
 656:	71 05       	cpc	r23, r1
 658:	61 05       	cpc	r22, r1
 65a:	08 94       	sec
 65c:	08 95       	ret

0000065e <__fp_zero>:
 65e:	e8 94       	clt

00000660 <__fp_szero>:
 660:	bb 27       	eor	r27, r27
 662:	66 27       	eor	r22, r22
 664:	77 27       	eor	r23, r23
 666:	cb 01       	movw	r24, r22
 668:	97 f9       	bld	r25, 7
 66a:	08 95       	ret

0000066c <__mulsf3>:
 66c:	0e 94 49 03 	call	0x692	; 0x692 <__mulsf3x>
 670:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_round>
 674:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fp_pscA>
 678:	38 f0       	brcs	.+14     	; 0x688 <__mulsf3+0x1c>
 67a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_pscB>
 67e:	20 f0       	brcs	.+8      	; 0x688 <__mulsf3+0x1c>
 680:	95 23       	and	r25, r21
 682:	11 f0       	breq	.+4      	; 0x688 <__mulsf3+0x1c>
 684:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_inf>
 688:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_nan>
 68c:	11 24       	eor	r1, r1
 68e:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_szero>

00000692 <__mulsf3x>:
 692:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_split3>
 696:	70 f3       	brcs	.-36     	; 0x674 <__mulsf3+0x8>

00000698 <__mulsf3_pse>:
 698:	95 9f       	mul	r25, r21
 69a:	c1 f3       	breq	.-16     	; 0x68c <__mulsf3+0x20>
 69c:	95 0f       	add	r25, r21
 69e:	50 e0       	ldi	r21, 0x00	; 0
 6a0:	55 1f       	adc	r21, r21
 6a2:	62 9f       	mul	r22, r18
 6a4:	f0 01       	movw	r30, r0
 6a6:	72 9f       	mul	r23, r18
 6a8:	bb 27       	eor	r27, r27
 6aa:	f0 0d       	add	r31, r0
 6ac:	b1 1d       	adc	r27, r1
 6ae:	63 9f       	mul	r22, r19
 6b0:	aa 27       	eor	r26, r26
 6b2:	f0 0d       	add	r31, r0
 6b4:	b1 1d       	adc	r27, r1
 6b6:	aa 1f       	adc	r26, r26
 6b8:	64 9f       	mul	r22, r20
 6ba:	66 27       	eor	r22, r22
 6bc:	b0 0d       	add	r27, r0
 6be:	a1 1d       	adc	r26, r1
 6c0:	66 1f       	adc	r22, r22
 6c2:	82 9f       	mul	r24, r18
 6c4:	22 27       	eor	r18, r18
 6c6:	b0 0d       	add	r27, r0
 6c8:	a1 1d       	adc	r26, r1
 6ca:	62 1f       	adc	r22, r18
 6cc:	73 9f       	mul	r23, r19
 6ce:	b0 0d       	add	r27, r0
 6d0:	a1 1d       	adc	r26, r1
 6d2:	62 1f       	adc	r22, r18
 6d4:	83 9f       	mul	r24, r19
 6d6:	a0 0d       	add	r26, r0
 6d8:	61 1d       	adc	r22, r1
 6da:	22 1f       	adc	r18, r18
 6dc:	74 9f       	mul	r23, r20
 6de:	33 27       	eor	r19, r19
 6e0:	a0 0d       	add	r26, r0
 6e2:	61 1d       	adc	r22, r1
 6e4:	23 1f       	adc	r18, r19
 6e6:	84 9f       	mul	r24, r20
 6e8:	60 0d       	add	r22, r0
 6ea:	21 1d       	adc	r18, r1
 6ec:	82 2f       	mov	r24, r18
 6ee:	76 2f       	mov	r23, r22
 6f0:	6a 2f       	mov	r22, r26
 6f2:	11 24       	eor	r1, r1
 6f4:	9f 57       	subi	r25, 0x7F	; 127
 6f6:	50 40       	sbci	r21, 0x00	; 0
 6f8:	9a f0       	brmi	.+38     	; 0x720 <__mulsf3_pse+0x88>
 6fa:	f1 f0       	breq	.+60     	; 0x738 <__mulsf3_pse+0xa0>
 6fc:	88 23       	and	r24, r24
 6fe:	4a f0       	brmi	.+18     	; 0x712 <__mulsf3_pse+0x7a>
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	bb 1f       	adc	r27, r27
 706:	66 1f       	adc	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	50 40       	sbci	r21, 0x00	; 0
 710:	a9 f7       	brne	.-22     	; 0x6fc <__mulsf3_pse+0x64>
 712:	9e 3f       	cpi	r25, 0xFE	; 254
 714:	51 05       	cpc	r21, r1
 716:	80 f0       	brcs	.+32     	; 0x738 <__mulsf3_pse+0xa0>
 718:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_inf>
 71c:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_szero>
 720:	5f 3f       	cpi	r21, 0xFF	; 255
 722:	e4 f3       	brlt	.-8      	; 0x71c <__mulsf3_pse+0x84>
 724:	98 3e       	cpi	r25, 0xE8	; 232
 726:	d4 f3       	brlt	.-12     	; 0x71c <__mulsf3_pse+0x84>
 728:	86 95       	lsr	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f7 95       	ror	r31
 732:	e7 95       	ror	r30
 734:	9f 5f       	subi	r25, 0xFF	; 255
 736:	c1 f7       	brne	.-16     	; 0x728 <__mulsf3_pse+0x90>
 738:	fe 2b       	or	r31, r30
 73a:	88 0f       	add	r24, r24
 73c:	91 1d       	adc	r25, r1
 73e:	96 95       	lsr	r25
 740:	87 95       	ror	r24
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__itoa_ncheck>:
 746:	bb 27       	eor	r27, r27
 748:	4a 30       	cpi	r20, 0x0A	; 10
 74a:	31 f4       	brne	.+12     	; 0x758 <__itoa_ncheck+0x12>
 74c:	99 23       	and	r25, r25
 74e:	22 f4       	brpl	.+8      	; 0x758 <__itoa_ncheck+0x12>
 750:	bd e2       	ldi	r27, 0x2D	; 45
 752:	90 95       	com	r25
 754:	81 95       	neg	r24
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	0c 94 af 03 	jmp	0x75e	; 0x75e <__utoa_common>

0000075c <__utoa_ncheck>:
 75c:	bb 27       	eor	r27, r27

0000075e <__utoa_common>:
 75e:	fb 01       	movw	r30, r22
 760:	55 27       	eor	r21, r21
 762:	aa 27       	eor	r26, r26
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	aa 1f       	adc	r26, r26
 76a:	a4 17       	cp	r26, r20
 76c:	10 f0       	brcs	.+4      	; 0x772 <__utoa_common+0x14>
 76e:	a4 1b       	sub	r26, r20
 770:	83 95       	inc	r24
 772:	50 51       	subi	r21, 0x10	; 16
 774:	b9 f7       	brne	.-18     	; 0x764 <__utoa_common+0x6>
 776:	a0 5d       	subi	r26, 0xD0	; 208
 778:	aa 33       	cpi	r26, 0x3A	; 58
 77a:	08 f0       	brcs	.+2      	; 0x77e <__utoa_common+0x20>
 77c:	a9 5d       	subi	r26, 0xD9	; 217
 77e:	a1 93       	st	Z+, r26
 780:	00 97       	sbiw	r24, 0x00	; 0
 782:	79 f7       	brne	.-34     	; 0x762 <__utoa_common+0x4>
 784:	b1 11       	cpse	r27, r1
 786:	b1 93       	st	Z+, r27
 788:	11 92       	st	Z+, r1
 78a:	cb 01       	movw	r24, r22
 78c:	0c 94 c8 03 	jmp	0x790	; 0x790 <strrev>

00000790 <strrev>:
 790:	dc 01       	movw	r26, r24
 792:	fc 01       	movw	r30, r24
 794:	67 2f       	mov	r22, r23
 796:	71 91       	ld	r23, Z+
 798:	77 23       	and	r23, r23
 79a:	e1 f7       	brne	.-8      	; 0x794 <strrev+0x4>
 79c:	32 97       	sbiw	r30, 0x02	; 2
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <strrev+0x18>
 7a0:	7c 91       	ld	r23, X
 7a2:	6d 93       	st	X+, r22
 7a4:	70 83       	st	Z, r23
 7a6:	62 91       	ld	r22, -Z
 7a8:	ae 17       	cp	r26, r30
 7aa:	bf 07       	cpc	r27, r31
 7ac:	c8 f3       	brcs	.-14     	; 0x7a0 <strrev+0x10>
 7ae:	08 95       	ret

000007b0 <_exit>:
 7b0:	f8 94       	cli

000007b2 <__stop_program>:
 7b2:	ff cf       	rjmp	.-2      	; 0x7b2 <__stop_program>
